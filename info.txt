start linux  
cat /etc/os-release 
#apt installs
sudo apt update
sudo apt install -y software-properties-common
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
curl -sl https://deb.nodesource.com/setup_15.x| sudo -E bash -
sudo apt install -y awscli nodejs gettext jq apt-transport-https \
  ca-certificates gnupg-agent docker-ce docker-ce-cli containerd.io

sudo npm install -g n

wget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
unzip aws-sam-cli-linux-x86_64.zip -d sam-installation
sudo ./sam-installation/install
rm -rf sam-installation aws-sam-cli-linux-x86_64.zip

# configure
aws configure # keys are in downloads  mrowe_accessKeys.csv

# get source
mkdir ~/github
cd ~/github
git clone https://github.com/mrowe70/lambda-refarch-webapp
cd ~/github/lambda-refarch-webapp
sed -e 's/AWS_USER_POOLS_WEB_CLIENT_ID/$AWS_USER_POOLS_WEB_CLIENT_ID/; s/API_BASE_URL/$API_BASE_URL/; s/COGNITO_HOSTED_DOMAIN/$COGNITO_HOSTED_DOMAIN/; s/REDIRECT_URL/$REDIRECT_URL/;'  www/src/config.default.js > www/src/config.template.js

cd /home/mrowe70/github/lambda-refarch-webapp
export AWS_DEFAULT_REGION=us-east-1
export STACK_NAME=lambda-refarch-webapp-1
export DEPLOYMENT_BUCKET=mrowe-lambda-refarch-webapp

sudo sam build --use-container
sam package --output-template-file packaged.yml --s3-bucket $DEPLOYMENT_BUCKET

sam deploy     --template-file packaged.yml     --stack-name $STACK_NAME     --capabilities CAPABILITY_IAM --parameter-overrides Repository=https://github.com/mrowe70/lambda-refarch-webapp/ OauthToken=192b632d82233a313f5cffd9505b590ff833d2f5 

#run mostly local (auth via aws cognito)
sudo docker run -p 8000:8000 amazon/dynamodb-local

aws dynamodb create-table --table-name TodoTable --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --billing-mode PAY_PER_REQUEST --endpoint-url http://127.0.0.1:8000

cd ~/github/lambda-refarch-webapp/
sudo sam local start-api --env-vars todo-src/test/environment/mac.json

cd ~/github/lambda-refarch-webapp/
#export AWS_DEFAULT_REGION=us-east-1
export STACK_NAME=lambda-refarch-webapp-1
export DEPLOYMENT_BUCKET=mrowe-lambda-refarch-webapp
export REDIRECT_URL_LOCAL=http://localhost:8080
export API_BASE_URL_LOCAL=http://127.0.0.1:8080
export AWS_USER_POOLS_WEB_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="CognitoClientID").OutputValue')
export COGNITO_HOSTED_DOMAIN=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="CognitoDomainName").OutputValue')

export REDIRECT_URL=$REDIRECT_URL_LOCAL
export API_BASE_URL=$API_BASE_URL_LOCAL

cat  www/src/config.template.js | envsubst >  www/src/config.js

cd www/src
npm install  --legacy-peer-deps ls
npm start

cd ~/github/lambda-refarch-webapp/


#https://code.visualstudio.com/
#Download the .deb file
#Open your downloads folder
#Right Click the VS Code .deb file
#Click install with Linux

cd ~/github/lambda-refarch-webapp
code .





export API_BASE_URL_CLOUD=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="TodoFunctionApi").OutputValue')
export AWS_USER_POOLS_WEB_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="CognitoClientID").OutputValue')
export COGNITO_HOSTED_DOMAIN=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="CognitoDomainName").OutputValue')
export REDIRECT_URL_CLOUD=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="AmplifyURL").OutputValue')

export REDIRECT_URL=$REDIRECT_URL_CLOUD
export API_BASE_URL=$API_BASE_URL_CLOUD
cat  www/src/config.template.js | envsubst >  www/src/config.js


--


export API_BASE_URL_CLOUD=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="TodoFunctionApi").OutputValue')
export AWS_USER_POOLS_WEB_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="CognitoClientID").OutputValue')
export COGNITO_HOSTED_DOMAIN=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="CognitoDomainName").OutputValue')
export REDIRECT_URL_CLOUD=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="AmplifyURL").OutputValue')

export REDIRECT_URL=$REDIRECT_URL_CLOUD
export API_BASE_URL=$API_BASE_URL_CLOUD
cat  www/src/config.template.js | envsubst >  www/src/config.js




-----
cd /home/mrowe70/github/lambda-refarch-webapp
export AWS_DEFAULT_REGION=us-east-1
export STACK_NAME=lambda-refarch-webapp-1
export DEPLOYMENT_BUCKET=mrowe-lambda-refarch-webapp

sam deploy     --template-file packaged.yml     --stack-name $STACK_NAME     --capabilities CAPABILITY_IAM --parameter-overrides Repository=https://github.com/mrowe70/lambda-refarch-webapp/ OauthToken=192b632d82233a313f5cffd9505b590ff833d2f5 

export API_BASE_URL_CLOUD=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="TodoFunctionApi").OutputValue')
export AWS_USER_POOLS_WEB_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="CognitoClientID").OutputValue')
export COGNITO_HOSTED_DOMAIN=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="CognitoDomainName").OutputValue')
export REDIRECT_URL_CLOUD=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="AmplifyURL").OutputValue')

export REDIRECT_URL=$REDIRECT_URL_CLOUD
export API_BASE_URL=$API_BASE_URL_CLOUD
cat  www/src/config.template.js | envsubst >  www/src/config.cloud.js
cat www/src/config.cloud.js > www/src/config.js

#aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[]"

git add www/src/config.js
git commit -m 'Update frontend config'
git push https://mrowe70:L%40tmein11@github.com/mrowe70/lambda-refarch-webapp.git

export AMPLIFY_APP_ID=$(aws amplify list-apps | jq -r '.apps[0].appId')
aws amplify start-job --app-id $AMPLIFY_APP_ID --branch-name master --job-type RELEASE

#aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name master 

export AMPLIFY_STATUS=$(aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name master  | jq -r '.jobSummaries[0].status')
while [ $AMPLIFY_STATUS = "RUNNING" ]
do
  sleep 10
export AMPLIFY_STATUS=$(aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name master  | jq -r '.jobSummaries[0].status')
    echo $AMPLIFY_STATUS
done

echo $REDIRECT_URL

----
Local:
sudo docker run -p 8000:8000 amazon/dynamodb-local
aws dynamodb create-table --table-name TodoTable --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --billing-mode PAY_PER_REQUEST --endpoint-url http://127.0.0.1:8000
sudo sam local start-api --env-vars todo-src/test/environment/mac.json

export AWS_DEFAULT_REGION=us-east-1
export STACK_NAME=lambda-refarch-webapp-1
export DEPLOYMENT_BUCKET=mrowe-lambda-refarch-webapp

export REDIRECT_URL_LOCAL=http://localhost:8080
export API_BASE_URL_LOCAL=http://127.0.0.1:8080
export AWS_USER_POOLS_WEB_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="CognitoClientID").OutputValue')
export COGNITO_HOSTED_DOMAIN=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="CognitoDomainName").OutputValue')

export REDIRECT_URL=$REDIRECT_URL_LOCAL
export API_BASE_URL=$API_BASE_URL_LOCAL

cat  www/src/config.template.js | envsubst >  www/src/config.local.js
cat www/src/config.local.js > www/src/config.js

cd www/src
npm start

aws cloudformation delete-stack --stack-name $STACK_NAME

--------

error = Error: Network Error at e.exports (https://master.d25qg1jdb3t1hs.amplifyapp.com/static/js/2.5efcf6be.chunk.js:2:12378) at XMLHttpRequest.p.onerror (https://master.d25qg1jdb3t1hs.amplifyapp.com/static/js/2.5efcf6be.chunk.js:2:11348)


-----


cd /home/mrowe70/github/lambda-refarch-webapp
export AWS_DEFAULT_REGION=us-east-1
export STACK_NAME=lambda-refarch-webapp-1
export DEPLOYMENT_BUCKET=mrowe-lambda-refarch-webapp

sam deploy     --template-file packaged.yml     --stack-name $STACK_NAME     --capabilities CAPABILITY_IAM --parameter-overrides Repository=https://github.com/mrowe70/lambda-refarch-webapp/ OauthToken=192b632d82233a313f5cffd9505b590ff833d2f5 

aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[]"

cp www/src/config.default.js www/src/config.js

cd www/src
npm install  --legacy-peer-deps ls
npm start


aws cloudformation delete-stack --stack-name $STACK_NAME

for log_group in $(aws logs describe-log-groups --log-group-name-prefix '/aws/lambda/'$STACK_NAME --query "logGroups[*].logGroupName" --output text); do
  echo "Removing log group ${log_group}..."
  aws logs delete-log-group --log-group-name ${log_group}
  echo
done













cd /home/mrowe70/github/lambda-refarch-webapp/www
code . 
cd src
npm install  --legacy-peer-deps ls
npm start

-------
npx create-react-app my-app
cd my-app
npm start

cd /home/mrowe70/projects/react/my-app
code .

sudo apt install chromium
sudo apt remove chromium

------

react envinronment
sudo apt-get update
sudo apt-get install curl gnupg -y
curl -sl https://deb.nodesource.com/setup_13.x| sudo -E bash -
curl -sl https://deb.nodesource.com/setup_15.x| sudo -E bash -
sudo apt-get install -y nodejs
sudo npm install -g n

https://code.visualstudio.com/
https://medium.com/@jacoboakley/web-development-with-a-chromebook-react-environment-setup-46173b1dc375

npx create-react-app my-app
cd my-app
npm start


cd ~/github
git clone https://github.com/mrowe70/lambda-refarch-webapp



sudo apt-get update
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg2 \
    software-properties-common
    
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -

sudo apt-key fingerprint 0EBFCD88

sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/debian \
   $(lsb_release -cs) \
   stable"
   

cat /etc/issue

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io

sudo docker run hello-world

sudo su 
passwd mrowe70

/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile
echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.profile


get https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
unzip aws-sam-cli-linux-x86_64.zip -d sam-installation
sudo ./sam-installation/install
sam --version


export AWS_DEFAULT_REGION=us-east-1
export STACK_NAME=lambda-refarch-webapp-1
#./deploy.sh

cd /home/mrowe70/github/lambda-refarch-webapp
sudo sam build --use-container

export AWS_DEFAULT_REGION=us-east-1
export STACK_NAME=lambda-refarch-webapp-1
export DEPLOYMENT_BUCKET=mrowe-lambda-refarch-webapp
sam package \
    --output-template-file packaged.yml \
    --s3-bucket $DEPLOYMENT_BUCKET


sudo docker run -p 8000:8000 amazon/dynamodb-local

aws dynamodb create-table --table-name TodoTable --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --billing-mode PAY_PER_REQUEST --endpoint-url http://127.0.0.1:8000

sudo sam local start-api --env-vars todo-src/test/environment/mac.json


https://github.com/settings/tokens/new

sam deploy     --template-file packaged.yml     --stack-name $STACK_NAME     --capabilities CAPABILITY_IAM --parameter-overrides Repository=https://github.com/mrowe70/lambda-refarch-webapp/ OauthToken=192b632d82233a313f5cffd9505b590ff833d2f5 

aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[]"

cp www/src/config.default.js www/src/config.js

cd www/src
npm install  --legacy-peer-deps ls
npm start


aws cloudformation delete-stack --stack-name $STACK_NAME

for log_group in $(aws logs describe-log-groups --log-group-name-prefix '/aws/lambda/'$STACK_NAME --query "logGroups[*].logGroupName" --output text); do
  echo "Removing log group ${log_group}..."
  aws logs delete-log-group --log-group-name ${log_group}
  echo
done

